import streamlit as st

from functions import generate_summary, video_info, is_valid_youtube_url, get_video_duration, generate_audio, generate_comment_summary, generate_shorten_video
from comments import fetch_comments, load_comments_in_format
from IPython.display import Video
import concurrent.futures

import json
import streamlit as st
from streamlit_echarts import st_echarts
from millify import millify
from st_aggrid import AgGrid
from st_aggrid.grid_options_builder import GridOptionsBuilder
from analytics import parse_video, youtube_metrics

st.set_page_config(page_title="Youtube Summarized", page_icon='üé¨')

# App UI
def youtube_app():

    st.markdown('## üé¨ T√≥m t·∫Øt YouTube Videos') 

    st.markdown('######') 
    
    st.markdown('#### üìº Nh·∫≠p URL c·ªßa video tr√™n Youtube')
    youtube_url = st.text_input("URL :", placeholder="https://www.youtube.com/watch?v=************")

    if is_valid_youtube_url(youtube_url):
        video_duration = get_video_duration(youtube_url)

        if video_duration >= 5:
            st.info(f"üïñ ƒê·ªô d√†i video l√† {video_duration} ph√∫t. Th·ªùi gian t√≥m t·∫Øt c√≥ th·ªÉ l√¢u h∆°n d·ª± ki·∫øn.")
        else:
            st.info(f"üïñ ƒê·ªô d√†i video l√† {video_duration} ph√∫t.")
        thumbnail_url, video_title = video_info(youtube_url)
        st.markdown(f"#### üìΩÔ∏è {video_title}")
        st.image(f"{thumbnail_url}", use_column_width='always')
    else:
        st.error("Vui l√≤ng nh·∫≠p URL video YouTube")


    if youtube_url:
        summary_length_mapping = {
            'Ng·∫Øn': 100,
            'V·ª´a': 200,
            'D√†i': 300
        }

        selected_length = summary_length_mapping[st.selectbox("Ch·ªçn ƒë·ªô d√†i t√≥m t·∫Øt:", list(summary_length_mapping.keys()))]
        if selected_length and st.button("T·∫°o t√≥m t·∫Øt"):
            if not youtube_url:
                st.warning("H√£y nh·∫≠p URL Youtube kh·∫£ d·ª•ng")
            else:
                with st.spinner("ƒêang t√≥m t·∫Øt v√† th·ªëng k√™..."):
                    # Create a ThreadPoolExecutor
                    with concurrent.futures.ThreadPoolExecutor() as executor:
                        # Submit the functions to the executor and store the Future objects
                        future_summary = executor.submit(generate_summary, youtube_url, selected_length)
                        future_audio = executor.submit(generate_audio, future_summary.result())
                        future_comments = executor.submit(fetch_comments, youtube_url)
                        future_summary_comment = executor.submit(generate_comment_summary, load_comments_in_format(future_comments.result()), selected_length)
                        future_shorten_video = executor.submit(generate_shorten_video, youtube_url)
                        future_df = executor.submit(parse_video, youtube_url)
                        future_df_metrics = executor.submit(youtube_metrics, youtube_url)

                st.markdown(f"#### üìÉ N·ªôi dung t√≥m t·∫Øt video:")
                result_summary = st.empty()
                result_summary.success(future_summary.result())

                st.markdown(f"#### üîä Audio n·ªôi dung t√≥m t·∫Øt:")
                result_audio = st.empty()
                with st.spinner("ƒêang t·∫°o √¢m thanh ..."):
                    result_audio.audio(future_audio.result())

                st.markdown(f"#### üìÉ N·ªôi dung t√≥m t·∫Øt b√¨nh lu·∫≠n:")
                result_comment = st.empty()
                result_comment.success(future_summary_comment.result())

                st.markdown(f"#### üìÉ Video t√≥m t·∫Øt ng·∫Øn ch·ª©a c√°c chuy·ªÉn c·∫£nh:")
                result_video = st.empty()
                with st.spinner("ƒêang t·∫°o video..."):
                    result_video.video(open(future_shorten_video.result(), 'rb').read())

                st.markdown(f"#### üìÉ Th·ªëng k√™ ƒë√°nh gi√° c·∫£m x√∫c c·ªßa ƒë√°nh gi√° video:")
                df = future_df.result()
                df_metrics = future_df_metrics.result()

                # Metrics
                col1, col2, col3 = st.columns(3)
                col1.metric("**L∆∞·ª£t xem**", millify(df_metrics[0], precision=2))
                col2.metric("**L∆∞·ª£t th√≠ch**", millify(df_metrics[1], precision=2))
                col3.metric("**S·ªë b√¨nh lu·∫≠n**", millify(df_metrics[2], precision=2))

                # Top Comments
                st.subheader("Top b√¨nh lu·∫≠n nhi·ªÅu l∆∞·ª£t th√≠ch nh·∫•t")
                df_top = df[['Author', 'Comment', 'Timestamp', 'Likes']].sort_values(
                    'Likes', ascending=False).reset_index(drop=True)

                gd1 = GridOptionsBuilder.from_dataframe(df_top.head(11))
                gridoptions1 = gd1.build()
                AgGrid(df_top.head(11), gridOptions=gridoptions1,
                    theme='streamlit', columns_auto_size_mode='FIT_CONTENTS',
                    update_mode='NO_UPDATE')

                # Top Languages
                st.subheader("Ng√¥n ng·ªØ")
                df_langs = df['Language'].value_counts().rename_axis(
                    'Language').reset_index(name='count')

                options2 = {
                    "tooltip": {
                        "trigger": 'axis',
                        "axisPointer": {
                            "type": 'shadow'
                        },
                        "formatter": '{b}: {c} b√¨nh lu·∫≠n'
                    },
                    "yAxis": {
                        "type": "category",
                        "data": df_langs['Language'].tolist(),
                    },
                    "xAxis": {"type": "value",
                            "axisTick": {
                                "alignWithLabel": "true"
                            }
                            },
                    "series": [{"data": df_langs['count'].tolist(), "type": "bar"}],
                }
                st_echarts(options=options2, height="500px")

                # Most Replied Comments
                st.subheader("Top b√¨nh lu·∫≠n nhi·ªÅu l∆∞·ª£t tr·∫£ l·ªùi nh·∫•t")
                df_replies = df[['Author', 'Comment', 'Timestamp', 'TotalReplies']].sort_values(
                    'TotalReplies', ascending=False).reset_index(drop=True)
                # st.dataframe(df_replies.head(11))

                gd2 = GridOptionsBuilder.from_dataframe(df_replies.head(11))
                gridoptions2 = gd2.build()
                AgGrid(df_replies.head(11), gridOptions=gridoptions2,
                    theme='streamlit', columns_auto_size_mode='FIT_CONTENTS',
                    update_mode='NO_UPDATE')

                # Sentiments of the Commentors
                st.subheader("Bi·ªÉu ƒë·ªì ph√¢n b·ªë c·∫£m x√∫c b√¨nh lu·∫≠n")
                sentiments = df[(df['Language'] == 'English') | (df['Language'] == 'Vietnamese')]
                data_sentiments = sentiments['TextBlob_Sentiment_Type'].value_counts(
                ).rename_axis('Sentiment').reset_index(name='counts')
            
                data_sentiments['Review_percent'] = (
                    100. * data_sentiments['counts'] / data_sentiments['counts'].sum()).round(1)

                result = data_sentiments.to_json(orient="split")
                parsed = json.loads(result)
                data = []

                for item in parsed['data']:
                    data.append({"value": item[2],
                                "name": item[0]})
                    
                options = {
                    "tooltip": {"trigger": "item",
                                "formatter": '{d}%'},
                    "legend": {"top": "5%", "left": "center"},
                    "series": [
                        {
                            "name": "Sentiment",
                            "type": "pie",
                            "radius": ["40%", "70%"],
                            "avoidLabelOverlap": False,
                            "itemStyle": {
                                "borderRadius": 10,
                                "borderColor": "#fff",
                                "borderWidth": 2,
                            },
                            "label": {"show": False, "position": "center"},
                            "emphasis": {
                                "label": {"show": True, "fontSize": "30", "fontWeight": "bold"}
                            },
                            "labelLine": {"show": False},
                            "data": data,
                        }
                    ],
                }
                st_echarts(
                    options=options, height="500px",
                )
    else:
        st.warning("YouTube URL kh√¥ng ƒë√∫ng ho·∫∑c kh√¥ng kh·∫£ d·ª•ng")

youtube_app()

# Hide Left Menu
st.markdown("""<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
</style>""", unsafe_allow_html=True)
